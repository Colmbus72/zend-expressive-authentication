{
    "docs": [
        {
            "location": "/",
            "text": "Expressive Authentication Middleware\n\n\n\n\n\n\nzend-expressive-authentication provides middleware for \nExpressive\n\nand \nPSR-7\n applications for the purpose of\nauthenticating HTTP requests using consumer- or third-party-provided adapters.\n\n\nWORK IN PROGRESS\n\n\nThis repository contains a \nwork in progress\n project for building an\nauthentication module for \nExpressive\n and \nPSR-7\n applications.\n\n\nPlease, do not use this code in a production environment!\n\n\nInstallation\n\n\nYou can install the \nzend-expressive-authentication\n library with composer:\n\n\n$ composer require zendframework/zend-expressive-authentication\n\n\n\nDocumentation\n\n\nDocumentation is \nin the doc tree\n, and can be compiled using \nmkdocs\n:\n\n\n$ mkdocs build\n\n\n\nYou may also \nbrowse the documentation online\n.",
            "title": "Home"
        },
        {
            "location": "/#expressive-authentication-middleware",
            "text": "zend-expressive-authentication provides middleware for  Expressive \nand  PSR-7  applications for the purpose of\nauthenticating HTTP requests using consumer- or third-party-provided adapters.",
            "title": "Expressive Authentication Middleware"
        },
        {
            "location": "/#work-in-progress",
            "text": "This repository contains a  work in progress  project for building an\nauthentication module for  Expressive  and  PSR-7  applications.  Please, do not use this code in a production environment!",
            "title": "WORK IN PROGRESS"
        },
        {
            "location": "/#installation",
            "text": "You can install the  zend-expressive-authentication  library with composer:  $ composer require zendframework/zend-expressive-authentication",
            "title": "Installation"
        },
        {
            "location": "/#documentation",
            "text": "Documentation is  in the doc tree , and can be compiled using  mkdocs :  $ mkdocs build  You may also  browse the documentation online .",
            "title": "Documentation"
        },
        {
            "location": "/v1/intro/",
            "text": "Zend Expressive Authentication\n\n\nThis component provides authentication abstraction using a middleware approach\nfor \nPSR-7\n and\n\nPSR-15\n\napplications.\n\n\nAuthentication is performed using the \nAuthenticationMiddleware\n\nclass. This middleware consumes an \nAuthenticationInterface\n\nadapter to check if a \nPSR-7\n request is\nauthenticated or not. If authenticated, the middleware executes the next\nmiddleware in the application, passing a \nUserInterface\n\nobject via a request attribute. If the request is not authenticated, the\nmiddleware returns a \n401 Unauthorized\n response based on the authentication\nadapter provided.\n\n\nThe \nZend\\Expressive\\Authentication\\UserInterface\n is defined as follows:\n\n\nnamespace Zend\\Expressive\\Authentication;\n\ninterface UserInterface\n{\n    /**\n     * Get the username\n     *\n     * @return string\n     */\n    public function getUsername(): string;\n\n    /**\n     * Get all user roles\n     *\n     * @return string[]\n     */\n    public function getUserRoles() : array;\n}\n\n\n\nThe \nUserInterface\n attribute in the PSR-7 request can be used for checking\nif a user has been authenticated or not, e.g. it can be used to verify the\nauthorization level of a user (for this scope, it is consumed by\n\nzend-expressive-authotization\n).\n\n\nUsage in the route\n\n\nThe \nAuthenticationMiddleware\n can be used to authenticate a route. You just\nneed to add the class name of the middleware in the pipeline of a route.\nAs an example:\n\n\n$app->get('/admin/dashboard', [\n    Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class,\n    Admin\\Action\\Dashboard::class\n], 'admin.dashboard');\n\n\n\nIn this example, the \nAuthenticationMiddleware\n is executed as first middleware\nof the route \nadmin.dashboard\n. If the user is authenticated, the application\nexecutes the \nDashboard\n action; otherwise it returns a \n401 Unauthorized\n\nresponse.\n\n\nChoosing an authentication adapter\n\n\nYou can choose an authentication adapter and a user repository through the\nservice container configuration.\n\n\nYou need to specify the service for authentication using the name\n\nZend\\Expressive\\Authentication\\AuthenticationInterface\n and the user registry\nusing the service name \nZend\\Expressive\\Authentication\\UserRepositoryInterface::class\n.\n\n\nFor instance, using \nzend-servicemanager\n you can easily configure these two\nservices using \naliases\n. Below is an example of configuration using the \nHTTP\nBasic Access Authentication\n adapter and the \nhtpasswd\n file as the user\nrepository.\n\n\n// ConfigProvider.php\n\nuse Zend\\Expressive\\Authentication\\AuthenticationInterface;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\n\nclass ConfigProvider\n{\n    // ...\n\n    public function getDependencies() : array\n    {\n        return [\n            'aliases' => [\n                AuthenticationInterface::class => Basic\\BasicAccess::class,\n                UserRepositoryInterface::class => UserRepository\\Htpasswd::class\n            ],\n            // ...\n        ];\n    }\n\n    // ...\n}",
            "title": "Introduction"
        },
        {
            "location": "/v1/intro/#zend-expressive-authentication",
            "text": "This component provides authentication abstraction using a middleware approach\nfor  PSR-7  and PSR-15 \napplications.  Authentication is performed using the  AuthenticationMiddleware \nclass. This middleware consumes an  AuthenticationInterface \nadapter to check if a  PSR-7  request is\nauthenticated or not. If authenticated, the middleware executes the next\nmiddleware in the application, passing a  UserInterface \nobject via a request attribute. If the request is not authenticated, the\nmiddleware returns a  401 Unauthorized  response based on the authentication\nadapter provided.  The  Zend\\Expressive\\Authentication\\UserInterface  is defined as follows:  namespace Zend\\Expressive\\Authentication;\n\ninterface UserInterface\n{\n    /**\n     * Get the username\n     *\n     * @return string\n     */\n    public function getUsername(): string;\n\n    /**\n     * Get all user roles\n     *\n     * @return string[]\n     */\n    public function getUserRoles() : array;\n}  The  UserInterface  attribute in the PSR-7 request can be used for checking\nif a user has been authenticated or not, e.g. it can be used to verify the\nauthorization level of a user (for this scope, it is consumed by zend-expressive-authotization ).",
            "title": "Zend Expressive Authentication"
        },
        {
            "location": "/v1/intro/#usage-in-the-route",
            "text": "The  AuthenticationMiddleware  can be used to authenticate a route. You just\nneed to add the class name of the middleware in the pipeline of a route.\nAs an example:  $app->get('/admin/dashboard', [\n    Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class,\n    Admin\\Action\\Dashboard::class\n], 'admin.dashboard');  In this example, the  AuthenticationMiddleware  is executed as first middleware\nof the route  admin.dashboard . If the user is authenticated, the application\nexecutes the  Dashboard  action; otherwise it returns a  401 Unauthorized \nresponse.",
            "title": "Usage in the route"
        },
        {
            "location": "/v1/intro/#choosing-an-authentication-adapter",
            "text": "You can choose an authentication adapter and a user repository through the\nservice container configuration.  You need to specify the service for authentication using the name Zend\\Expressive\\Authentication\\AuthenticationInterface  and the user registry\nusing the service name  Zend\\Expressive\\Authentication\\UserRepositoryInterface::class .  For instance, using  zend-servicemanager  you can easily configure these two\nservices using  aliases . Below is an example of configuration using the  HTTP\nBasic Access Authentication  adapter and the  htpasswd  file as the user\nrepository.  // ConfigProvider.php\n\nuse Zend\\Expressive\\Authentication\\AuthenticationInterface;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\n\nclass ConfigProvider\n{\n    // ...\n\n    public function getDependencies() : array\n    {\n        return [\n            'aliases' => [\n                AuthenticationInterface::class => Basic\\BasicAccess::class,\n                UserRepositoryInterface::class => UserRepository\\Htpasswd::class\n            ],\n            // ...\n        ];\n    }\n\n    // ...\n}",
            "title": "Choosing an authentication adapter"
        },
        {
            "location": "/v1/auth-adapter/",
            "text": "Authentication adapters\n\n\nThe authentication adapters for \nzend-expressive-authentication\n implement the\ninterface \nZend\\Expressive\\Authentication\\AuthenticationInterface\n:\n\n\nnamespace Zend\\Expressive\\Authentication;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\ninterface AuthenticationInterface\n{\n    /**\n     * Authenticate the PSR-7 request and return a valid user,\n     * or null if not authenticated\n     *\n     * @param ServerRequestInterface $request\n     * @return UserInterface|null\n     */\n    public function authenticate(ServerRequestInterface $request): ?UserInterface;\n\n    /**\n     * Generate the unauthorized response\n     *\n     * @param ServerRequestInterface $request\n     * @return ResponseInterface\n     */\n    public function unauthorizedResponse(ServerRequestInterface $request): ResponseInterface;\n}\n\n\n\nThis interface contains two method: \nauthenticate()\n to check if a PSR-7\nrequest contains a valid credential, and \nunauthorizedResponse()\n to generate\nand return an unauthorized response.\n\n\nWe provide 4 authentication adapters:\n\n\n\n\nzend-expressive-authentication-basic\n,\n  for \nBasic Access Authentication\n,\n  supporting only \nbcrypt\n as the password hashing algorithm to ensure best\n  security.\n\n\nzend-expressive-authentication-session\n,\n  for authenticating username/password credential pairs and persisting them\n  between requests via PHP sessions.\n\n\nzend-expressive-authentication-zendauthentication\n,\n  supporting the \nzend-authentication\n\n  component.\n\n\nzend-expressive-authentication-oauth2\n,\n  supporting the \nOAuth2\n authentication framework via the\n  \nleague/oauth2-server\n package.",
            "title": "Authentication adapter"
        },
        {
            "location": "/v1/auth-adapter/#authentication-adapters",
            "text": "The authentication adapters for  zend-expressive-authentication  implement the\ninterface  Zend\\Expressive\\Authentication\\AuthenticationInterface :  namespace Zend\\Expressive\\Authentication;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\ninterface AuthenticationInterface\n{\n    /**\n     * Authenticate the PSR-7 request and return a valid user,\n     * or null if not authenticated\n     *\n     * @param ServerRequestInterface $request\n     * @return UserInterface|null\n     */\n    public function authenticate(ServerRequestInterface $request): ?UserInterface;\n\n    /**\n     * Generate the unauthorized response\n     *\n     * @param ServerRequestInterface $request\n     * @return ResponseInterface\n     */\n    public function unauthorizedResponse(ServerRequestInterface $request): ResponseInterface;\n}  This interface contains two method:  authenticate()  to check if a PSR-7\nrequest contains a valid credential, and  unauthorizedResponse()  to generate\nand return an unauthorized response.  We provide 4 authentication adapters:   zend-expressive-authentication-basic ,\n  for  Basic Access Authentication ,\n  supporting only  bcrypt  as the password hashing algorithm to ensure best\n  security.  zend-expressive-authentication-session ,\n  for authenticating username/password credential pairs and persisting them\n  between requests via PHP sessions.  zend-expressive-authentication-zendauthentication ,\n  supporting the  zend-authentication \n  component.  zend-expressive-authentication-oauth2 ,\n  supporting the  OAuth2  authentication framework via the\n   league/oauth2-server  package.",
            "title": "Authentication adapters"
        },
        {
            "location": "/v1/user-repository/",
            "text": "User Repository\n\n\nAn authentication adapter can pull user information from a variety\nof repositories:\n\n\n\n\nan \nhtpasswd\n file\n\n\na database\n\n\na cache\n\n\n\n\nzend-expressive-authentication provides an interface,\n\nZend\\Expressive\\Authentication\\UserRepositoryInterface\n, to access this user\nstorage:\n\n\nnamespace Zend\\Expressive\\Authentication;\n\ninterface UserRepositoryInterface\n{\n    /**\n     * Authenticate the credential (username) using a password\n     * or using only the credential string (e.g. token based credential)\n     * It returns the authenticated user or null.\n     *\n     * @param string $credential can be also a token\n     */\n    public function authenticate(string $credential, string $password = null) : ?UserInterface;\n\n    /**\n     * Get the user roles if present.\n     *\n     * @param string $username\n     * @return string[]\n     */\n    public function getRolesFromUser(string $username) : array;\n}\n\n\n\nIt contains two functions: \nauthenticate()\n and \ngetRolesFromUser()\n. The first\nis used to authenticate using the user's credential. If authenticated, the\nresult will be a \nUserInterface\n instance, otherwise a null value is returned.\n\n\nThe second function is \ngetRolesFromUser()\n and it specifies how to retrieve\nthe roles for a user. If a user does not have roles, this function will return\nan empty array.",
            "title": "User repository"
        },
        {
            "location": "/v1/user-repository/#user-repository",
            "text": "An authentication adapter can pull user information from a variety\nof repositories:   an  htpasswd  file  a database  a cache   zend-expressive-authentication provides an interface, Zend\\Expressive\\Authentication\\UserRepositoryInterface , to access this user\nstorage:  namespace Zend\\Expressive\\Authentication;\n\ninterface UserRepositoryInterface\n{\n    /**\n     * Authenticate the credential (username) using a password\n     * or using only the credential string (e.g. token based credential)\n     * It returns the authenticated user or null.\n     *\n     * @param string $credential can be also a token\n     */\n    public function authenticate(string $credential, string $password = null) : ?UserInterface;\n\n    /**\n     * Get the user roles if present.\n     *\n     * @param string $username\n     * @return string[]\n     */\n    public function getRolesFromUser(string $username) : array;\n}  It contains two functions:  authenticate()  and  getRolesFromUser() . The first\nis used to authenticate using the user's credential. If authenticated, the\nresult will be a  UserInterface  instance, otherwise a null value is returned.  The second function is  getRolesFromUser()  and it specifies how to retrieve\nthe roles for a user. If a user does not have roles, this function will return\nan empty array.",
            "title": "User Repository"
        }
    ]
}